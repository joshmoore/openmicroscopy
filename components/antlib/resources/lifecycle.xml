<?xml version="1.0" encoding="utf-8"?>
<project name="lifecycle" default="help" basedir=".">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
  DOCUMENTATION:
  ==============================================================================
  Provides lifecycle targets similar to those found in maven. See
  http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

  Each target stair-steps down to prepare:
  dist->integration->install->package->test->compile->generate->prepare

-->

	<target name="help">
		<echo>
			This build file is intended for import only.
		</echo>
	</target>

	<target name="prepare" depends="deps-retrieve,variables-define">
<!--
		<available file="${deps.lib.dir}" property="deps.lib.dir.needed"/>
		<antcall target="deps-retrieve" inheritrefs="true"/>
-->
		<makeDirectories/>
		<copyResource file="${root.dir}/etc/local.properties"/>
		<copyResource file="${root.dir}/etc/omero.properties"/>
		<copyResource file="${root.dir}/etc/hibernate.properties"/>
		<copyResource file="${root.dir}/etc/log4j.properties"/>
		<copyResource file="${root.dir}/etc/jndi.properties"/>
		<available property="slice2java-exists" filepath="${env.PATH}" file="slice2java" />
		<available property="slice2java-exists" filepath="${env.PATH}" file="slice2java.exe" />
		<condition property="skip.ice">
		   <or><not><isset property="uses.ice"/></not>
		   <equals arg1="${no.ice}" arg2="true" trim="true"/></or>
		</condition>
		<fail message="${msg.macro.missing_fail} slice2java">
		  <condition><and>
		    <not><isset property="skip.ice"/></not>
		    <not><isset property="slice2java-exists"/></not>
		  </and></condition>
		</fail>
		<fail message="${msg.prepare.bad.ice.home}">
		  <condition><and>
		    <not><isset property="skip.ice"/></not>
		    <not><available file="${ice.home}" type="dir"/></not>
		  </and></condition>
		</fail>
	</target>


	<target name="slice-init" depends="prepare">
		<fileset dir="${basedir}" id="slice.generated">
			<include name="resources/${ice.pat}"/>
			<include name="target/generated/resources/${ice.pat}"/>
		</fileset>
		<pathconvert pathsep=" "   property="slice.files" refid="slice.generated"/>
		<is-done name="slice2java" srcdir="${basedir}" includes="${ice.pat}" />
		<condition property="skip.ice.or.no.slice2java">
		    <or>
			<isset property="slice2java.not.required"/>
			<isset property="skip.ice"/>
		    </or>
		</condition>
		<condition property="test.skip">
		    <and>
		    <isset property="uses.ice"/>
		    <isset property="skip.ice"/>
		    </and>
		</condition>
		<condition property="skip.compile">
		    <and>
		    <isset property="uses.ice"/>
		    <isset property="skip.ice"/>
		    </and>
		</condition>
	</target>

	<macrodef name="slice-macro">
	   <attribute name="lang"/>
	   <attribute name="files"/>
	   <attribute name="suffix" default=""/>
	   <attribute name="ice.slice" default="${ice.home}/slice"/>
	   <attribute name="output" default="${src.dest}/@{exec}/@{suffix}"/>
	   <sequential>
		 <mkdir dir="@{output}"/>
		 <exec executable="slice2@{lang}" 
		    failonerror="true" failifexecutionfails="true"
		    output="@{output}/.output.log">
		        <arg value="--tie"/>
		 	<arg value="--output-dir"/>
			<arg value="@{output}"/>
			<arg value="-I${resrc.dest}"/>
			<arg value="-I${resrc.dir}"/>
			<arg value="-I${blitz.comp}/resources"/>
			<arg value="-I${blitz.comp}target/generated/resources"/>
			<arg value="-I@{ice.slice}"/>
			<arg line="@{files}"/>
		 </exec>
	   	<done name="slice2@{lang}"/>
	   </sequential>
	</macrodef>

	<target name="slice" depends="slice-init" if="slice2java-exists" unless="skip.ice.or.no.slice2java">
		<slice-macro lang="java" files="${slice.files}" output="${src.dest}"/>
	</target>

	<target name="generate" depends="prepare,slice">
                <echo file="${resrc.dest}/Classpath.sh">
                  export CLASSPATH=${omero.path}
                </echo>
		<copyResources/>
	</target>

	<!-- javac macro which can contain any number of path
	elements for compilation. Usually src.dir and src.dest
	will need to be compiled together because of inter-
	dependencies -->
	<macrodef name="myjavac">
	        <element name="srcelements" implicit="yes"/>
		<sequential>
		<javac 
			fork="yes"
			destdir="${classes.dir}"
			classpathref="omero.classpath" 
			sourcepath=""
			source="${javac.source}"
			target="${javac.target}"
			debug="${javac.debug}"
			debuglevel="${javac.debuglevel}"
			memoryMaximumSize="${javac.maxmem}"
		>
		        <srcelements/>
		</javac>
		</sequential>
	</macrodef>

	<target name="compile" depends="generate" unless="skip.compile">
		<myjavac>
		  <src path="${src.dir}"/>
		  <src path="${src.dest}"/>
		</myjavac>
	</target>

	<target name="testng-init" unless="test.skip">
		<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="omero.test.classpath"/>
	</target>

	<macrodef name="suite">
		<element name="files" implicit="yes"/>
		<sequential>
		<testng outputDir="${testreports.dir}"
			haltonfailure="${test.with.fail}"
			haltonskipped="${test.with.fail}"
			>
 			<classpath>
				<path refid="omero.test.classpath"/>
				<pathelement location="${testclasses.dir}"/>
				<pathelement location="${classes.dir}"/>
			</classpath>
			<files/>
		</testng>
		</sequential>
	</macrodef>


	<target name="test" depends="compile,testng-init" unless="test.skip">
		<!-- may be overriden by fail-on-error -->
		<property name="test.with.fail" value="false"/>
	        <property name="unit.suite" value="unit.testng.xml"/>
		<copyTestResources/>
		<javac 
			fork="yes"
			debug="on"
			destdir="${testclasses.dir}"
			classpathref="omero.test.classpath" >
			<src path="${test.dir}"/>
		</javac>
		<suite>
			<xmlfileset dir="${test.dir}">
				<include name="${unit.suite}"/>
			</xmlfileset>
		</suite>
	</target>
		
	<target name="junittest" depends="compile" unless="test.skip">
		<copyTestResources/>
		<javac 
			fork="yes"
			destdir="${testclasses.dir}"
			classpathref="omero.classpath" >
			<src path="${test.dir}"/>
		</javac>
		<echo> Skipping DBUnit Tests ... </echo>
		<junit 
			printsummary="withOutAndErr" 
			haltonfailure="${test.with.fail}"
			fork="on"
			forkmode="perTest"
			>
 			<classpath>
				<path refid="omero.classpath"/>
				<pathelement location="${testclasses.dir}"/>
			</classpath>

			<formatter type="plain"/>

			<batchtest todir="${testreports.dir}">
				<fileset dir="${testclasses.dir}">
					<include name="**/*Test.class"/>
					<include name="**/*Tests.class"/>
					<exclude name="**/AllTests.class"/>
					<exclude name="**/Abstract*.class"/>
					<!--exclude name="**/itests/**/*"/-->
					<exclude name="**/dbtests/**/*"/>
				</fileset>
			</batchtest>
		</junit>	
	</target>
		
	<target name="package" depends="test">
		<pathconvert property="mf.classpath"
			refid="omero.classpath" 
			pathsep=" " dirsep="/">
			<flattenmapper/>
		</pathconvert>
		<jar destfile="${target.dir}/${ivy.module}.jar">
			<manifest>
				<attribute name="Class-Path" value="${mf.classpath} services.jar extensions.jar"/>
				<attribute name="Main-Class" value="${main.class}"/>
			</manifest>
			<fileset dir="${classes.dir}">	
				<exclude name="local.properties"/>
				<exclude name="omero.properties"/>
				<exclude name="hibernate.properties"/>
				<exclude name="jndi.properties"/>
				<exclude name="log4j.properties"/>
				<exclude name="**/*.cpp"/>
				<exclude name="**/*.h"/>
			</fileset>
		</jar>
	</target>

	<target name="install" depends="package,deps-publish-local"/>

	<target name="integration" depends="install" unless="test.skip">
		<!-- may be overriden by fail-on-error -->
		<property name="test.with.fail" value="false"/>
		<property name="integration.suite" value="integration.testng.xml"/>
		<suite>
			<xmlfileset dir="${test.dir}">
				<include name="${integration.suite}"/>
			</xmlfileset>
		</suite>
	</target>

	<target name="dist" depends="integration">
		<!-- empty by default -->
	</target>

	<target name="clean">
		<delete dir="${target.dir}"/>
	</target>

	<!-- NON-LIFECYCLE HELPER TARGETS -->

	<target name="strict-test" depends="fail-on-error,clean-tests,test"/>

	<target name="clean-tests">
		<delete dir="${testclasses.dir}"/>
		<delete dir="${testreports.dir}"/>
	</target>

	<target name="refresh" if="eclipse.running">
		<eclipse.refreshLocal resource="omero-dsl" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-common" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-server" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-client" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-shoola-adapter" depth="infinite"/>
		<eclipse.refreshLocal resource="missing" depth="infinite"/>		
	</target>

  <target name="standalone">
    <copy todir="${target.dir}/standalone">
      <fileset dir="${deps.lib.dir}" includes="**/*.jar"/>
      <fileset dir="${target.dir}" includes="*.jar"/>
    </copy>
    <jar update="true" destfile="${target.dir}/standalone/${ivy.module}.jar">
      <fileset dir="${resrc.dir}">
        <include name="**/config.*"/>
        <include name="**/*.config"/>
        <include name="**/*.xml"/>
      </fileset>
      <fileset dir="${resrc.dest}">
        <include name="**/*.properties"/>
      </fileset>
    </jar>
  </target>

    <!-- MACROS -->

    <macrodef name="copyResource">
        <attribute name="file"/>
        <sequential>
            <basename property="props.file.prop" file="@{file}"/>
            <available file="@{file}" property="${props.file.prop}.exists"/>
            <fail unless="${props.file.prop}.exists">
                @{file} ${msg.macro.missing_properties}
            </fail>
           <copy file="@{file}" todir="${resrc.dest}" failonerror="true" />
       <copy file="@{file}" todir="${classes.dir}" failonerror="true" />
        </sequential>
    </macrodef>

</project>

