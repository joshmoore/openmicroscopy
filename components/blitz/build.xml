<?xml version="1.0" encoding="utf-8"?>
<project name="blitz" default="install" basedir=".">

    <property name="import.dir" value="${basedir}/../antlib/resources"/>
    <import file="${import.dir}/global.xml"/>
    <import file="${import.dir}/dependencies.xml"/>
    <import file="${import.dir}/lifecycle.xml"/>
    <import file="${import.dir}/hibernate.xml"/>

    <!-- Class that will be called via "java -jar" on this artifact -->
    <property name="main.class" value="ome.services.blitz.Main"/>

    <!-- Local properties -->
    <property name="uses.ice" value="true"/>


<target name="grv" depends="prepare,load-groovy">

  <taskdef classname="ome.dsl.GroovyTask" classpathref="omero.classpath" name="grv"/>

  <grv destdir="${resrc.dest}/">
    <fileset dir="${common.comp}/resources/">
      <include name="${dsl.pat}"/>
    </fileset>
  </grv>

  <groovy src="${resrc.dir}/boo.groovy"/>

</target>

    <!-- TODO Be sure to remove the warning messages and macros -->
	      		
	<target name="generate" depends="prepare,icegen,lifecycle.generate"/>

	<target name="compile" depends="generate" unless="skip.compile">
		<hard-wire file="ome/services/blitz/fire/SessionManagerI.java"
		    token="&quot;ome.security.basic.BasicSecurityWiring&quot;"/>
		<myjavac>
		    <exclude name="**/SessionManagerI.java"/>
		    <src path="${src.dest}"/>
		    <src path="${src.dir}"/>
		</myjavac>
		<myjavac>
		    <include name="**/SessionManagerI.java"/>
		    <src path="${src.dest}"/>
		</myjavac>
	<delete file="${src.dest}/ome/services/blitz/fire/SessionManagerI.java"/>
	</target>

	<target name="install" depends="lifecycle.install,standalone">
		<useServices dir="${target.dir}/standalone"/>
	</target>

    <!-- = = = = = = = = = = = = = = = = =
          generate slice   
         = = = = = = = = = = = = = = = = = -->
	
	<target name="icegen-init" depends="prepare">
		<is-done name="icegen1"  srcdir="${common.comp}/${generated.rel}/resources" includes="${hbm.pat}"/>
		<is-done name="icegen2" srcdir="${resrc.dir}" includes="**/*.vm"/>
		<condition property="icegen.not.required">
			<and>
				<isset property="icegen1.not.required"/>
				<isset property="icegen2.not.required"/>
			</and>
		</condition>
	</target>
	
        <macrodef name="split-combined">
            <attribute name="all" default="all"/>
            <attribute name="prefix"/>
            <element name="mappers" implicit="true"/>
            <sequential>
            <copy todir="${basedir}">
                <fileset dir="${basedir}" includes="**/*.combined"/>
                <filterchain>
                    <linecontainsregexp>
                        <regexp pattern="^\[@{all}\]|^\[@{prefix}\]"/>
                    </linecontainsregexp>
                    <tokenfilter>
                        <replaceregex pattern="^\[@{all}\]\s?" replace=""/>
                        <replaceregex pattern="^\[@{prefix}\]\s?" replace=""/>
                    </tokenfilter>
                </filterchain>
                <mappers/>
            </copy>
            </sequential>
        </macrodef>

	<target name="icegen" depends="icegen-init,load-hibernate" unless="icegen.not.required">
		<hibernate mappings="${common.comp}/${generated.rel}/resources">
			<hbmtemplate template="templates/combined.vm"     filepattern="resources/{class-name}I.combined" />
			<hbmtemplate template="templates/ice_includes.vm" filepattern="resources/OMERO/fwd.ice" />
			<hbmtemplate template="templates/java_ice_map.vm" filepattern="src/omero/util/IceMap.java" />
			<hbmtemplate template="templates/java_obj_reg.vm" filepattern="src/omero/util/ObjectFactoryRegistrar.java" />
			<hbmtemplate template="templates/cpp_obj_reg.vm"  filepattern="src/OMERO/ObjectFactoryRegistrar.cpp" />
			<hbmtemplate template="templates/factorymap.vm"  filepattern="resources/omero/util/FactoryMap.combined" />
		</hibernate>
		

		<!--
		    This section takes the output of the combined.vm template and splits it into
		    the various sections. All of these files represent the Ice model and our
		    specializations of it 
		-->
		<split-combined prefix="hdr">
			<!-- resources/*I.combined => ../../src/cpp/generated/*I.h -->
			<regexpmapper from="target/generated/resources/(.*?)I[.]combined" to="target/generated/resources/OMERO/Model/\1I.h"/>
		</split-combined>
		<split-combined prefix="cpp">
			<regexpmapper from="target/generated/resources/(.*?)I[.]combined" to="target/generated/src/OMERO/Model/\1I.cpp"/>
		</split-combined>
		<split-combined prefix="jav">
			<regexpmapper from="target/generated/resources/(.*?)I[.]combined" to="target/generated/src/omero/model/\1I.java"/>
		</split-combined>
		<split-combined prefix="pyc">
			<regexpmapper from="target/generated/resources/(.*?)I[.]combined" to="target/generated/src/omero_model_\1I.py"/>
		</split-combined>
		<split-combined prefix="ice">
			<regexpmapper from="target/generated/resources/(.*?)I[.]combined" to="target/generated/resources/OMERO/Model/\1.ice"/>
		</split-combined>
		<!--
		    This does the same fore the factorymap.vm template.
		-->
		<split-combined prefix="pyc">
			<regexpmapper from="target/generated/resources/omero/util/FactoryMap.combined" to="target/generated/src/omero/util/FactoryMap.py"/>
		</split-combined>
		
		<!--
		    By deleting from the target directory what already exists under
		    src/ or resources/ it is possible to override code generation.
		-->
		<delete>
			<fileset dir="${src.dest}" includes="**/*.java">
				<present present="both" targetdir="${src.dir}"/>
			</fileset>
			<fileset dir="${resrc.dest}" includes="**/*.ice">
				<present present="both" targetdir="${resrc.dir}"/>
			</fileset>
			<fileset dir="${resrc.dest}" includes="**/*.ice">
				<present present="both" targetdir="${resrc.dir}"/>
			</fileset>
			<fileset dir="${resrc.dest}" includes="**/*.h">
				<present present="both" targetdir="${src.dir}/cpp"/>
			</fileset>
			<fileset dir="${src.dest}" includes="**/*.cpp">
				<present present="both" targetdir="${src.dir}/cpp"/>
			</fileset>
		</delete>

		<done name="icegen1"/>
		<done name="icegen2"/>
	</target>

	<target name="dist" depends="package,install" unless="skip.compile"><!-- install for standalone -->
	  <copy todir="${dist.dir}/etc">
	    <fileset dir="${resrc.dir}" includes="*.config"/>
	    <flattenmapper/>
	  </copy>
	  <copy todir="${dist.dir}/include">
	    <fileset dir="${resrc.dest}" includes="**/*.h"/>
	    <fileset dir="${resrc.dir}"  includes="**/*.ice"/>
	    <fileset dir="${resrc.dest}" includes="**/*.ice,**/*.h"/>
	  </copy>
	  <copy todir="${dist.dir}/blitz">
	    <fileset dir="${target.dir}/standalone" includes="**/*"/>
	  </copy>
	</target>

</project>

