r*
 *   $Id$
 *
 *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 *#

Note: lines not prefixed with [...] will be omitted in the final product.
The other prefixes are used by blitz/build.xml to determine how this file
will be split. This is done because the individual velocity if/elseif's 
and sets are nearly identical.

Here we turn off all prefixes except for ice.  Since <>I files are
concrete implementations, they should only be generated for concrete
classes.

#set( $ALL = "all" )
#set( $all = "all" )
#set( $jav = "jav" )
#set( $cpp = "cpp" )
#set( $hdr = "hdr" )
#set( $ice = "ice" )
#set( $pyc = "pyc" )
#if($pojo.classModifiers.contains("abstract"))
#set( $all = "abs" )
#set( $jav = "abs" )
#set( $cpp = "abs" )
#set( $hdr = "abs" )
#set( $pyc = "abs" )
#end

Copyright notice added to all files:
[$pyc] """
[$ALL] /*
[$ALL]  *   Generated by blitz/templates/resouces/combined.vm
[$hdr]  *   See ../../README.h for information on these types.
[$ice]  *   See ../../README.ice for information on these types.
[$ALL]  *
[$ALL]  *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
[$ALL]  *   Use is subject to license terms supplied in LICENSE.txt
[$ALL]  *
[$ALL]  */
[$pyc] """

VARIABLES:
#set($Pojo  = "${pojo.declarationName}")
#set($PojoI = "${Pojo}I")
#set($POJO  = "${Pojo.toUpperCase()}")
#set($POJOI = "${PojoI.toUpperCase()}")


DECLARATION BLOCK:

[$ice] #ifndef ${POJO}_ICE
[$ice] #define ${POJO}_ICE
[$hdr] #ifndef ${POJOI}_H
[$hdr] #define ${POJOI}_H

[$ice] \\\#include <OMERO/fwd.ice>
[$ice] \\\#include <OMERO/IObject.ice>
[$ice] \\\#include <OMERO/RTypes.ice>
#if( $pojo.isSubclass() )
#set( $parent = $pojo.extendsDeclaration.replaceFirst("extends.*ome.model..+?[.]","") )
[$ice] \\\#include <OMERO/Model/${parent}.ice>
#set( $include = '\#include' )
#set( $importModify = '.replaceAll("^","[ice]").replaceAll(".*java.*","").replaceAll("import.*[.](.*?);","$include <OMERO/Model/$1.ice>") ' )
$secondpassclassimports$importModify
#end 
[$hdr] \\\#include <OMERO/ClientErrors.h>
[$hdr] \\\#include <OMERO/IObject.h>
[$hdr] \\\#include <OMERO/Model/DetailsI.h>
[$hdr] \\\#include <OMERO/Model/${Pojo}.h>
[$hdr] \\\#include <OMERO/ModelI.h>

[$ice] module omero {
[$ice]   module model {

[$jav] package omero.model;
[$jav] import  java.util.*;
[$jav] import  ome.conditions.*;
[$jav] public class ${PojoI} extends ${Pojo} 
[$jav]    implements ome.api.ModelBased {

Note how the whitespace for the python definitions is important.
[$pyc] import Ice
[$pyc] import OMERO_Model_${Pojo}_ice
[$pyc] _omero = Ice.openModule("omero")
[$pyc] _omero_model = Ice.openModule("omero.model")
[$pyc] __name__ = "omero.model"

[$pyc] class ${PojoI}(_omero_model.$Pojo):
[$pyc]
[$hdr] namespace omero { 
[$hdr]   namespace model {
[$hdr]     class ${PojoI} : virtual public ${Pojo} { 

[$cpp] \\\#include <OMERO/Model/${Pojo}I.h>
[$cpp] namespace omero { 
[$cpp]   namespace model {

[$hdr]     protected:

GENERATOR:

[$pyc]       class ${Pojo}I_generator:
[$pyc]           def __iter__(self):
[$pyc]               return self
[$pyc]           def next(self):
[$pyc]               return ${Pojo}I()
[$pyc]
[$pyc]       @classmethod
[$pyc]       def generator(cls):
[$pyc]           return cls.${Pojo}I_generator()
[$pyc]

INTERNAL METHODS:

[$hdr]       void errorIfUnloaded();
[$cpp]       void ${PojoI}::errorIfUnloaded()
[$cpp]       {
[$cpp]         if (! loaded ) throw omero::UnloadedEntityException(__FILE__,__LINE__,"Object unloaded");
[$cpp]       }
[$jav]       protected void errorIfUnloaded() throws omero.UnloadedEntityException
[$jav]       {
[$jav]         if ( ! loaded ) throw new omero.UnloadedEntityException("Object unloaded:"+this);
[$jav]       }
[$pyc]       def errorIfUnloaded(self):
[$pyc]           if not self.loaded:
[$pyc]               raise _omero.UnloadedEntityException("Object unloaded:"+str(self))
[$pyc]
[$hdr]       void throwNullCollectionException(std::string propertyName);
[$cpp]       void ${PojoI}::throwNullCollectionException(std::string propertyName)
[$cpp]       {
[$cpp]         std::string s = "Error updating collection:" + propertyName +"\n"+
[$cpp]         "Collection is currently null. This can be seen\n"+
[$cpp]         "by testing \""+ propertyName +"Loaded\". This implies\n"+
[$cpp]         "that this collection was unloaded. Please refresh this object\n"+
[$cpp]         "in order to update this collection.\n";
[$cpp]         throw omero::UnloadedCollectionException(
[$cpp]            __FILE__,__LINE__,s.c_str());
[$cpp]       }
[$jav]       protected void throwNullCollectionException(String propertyName) throws omero.UnloadedCollectionException
[$jav]       {
[$jav]          throw new omero.UnloadedCollectionException(
[$jav]            "Error updating collection:" + propertyName +"\n"+
[$jav]            "Collection is currently null. This can be seen\n"+
[$jav]            "by testing \""+ propertyName +"Loaded\". This implies\n"+
[$jav]            "that this collection was unloaded. Please refresh this object\n"+
[$jav]            "in order to update this collection.\n"
[$jav]            );
[$jav]       }
[$pyc]       def throwNullCollectionException(self,propertyName):
[$pyc]           raise omero.UnloadedEntityException(""+
[$pyc]           "Error updating collection:" + propertyName +"\n"+
[$pyc]           "Collection is currently null. This can be seen\n" +
[$pyc]           "by testing \""+ propertyName +"Loaded\". This implies\n"+
[$pyc]           "that this collection was unloaded. Please refresh this object\n"+
[$pyc]           "in order to update this collection.\n")
[$pyc]
DESTRUCTOR BLOCK:

[$hdr]       virtual ~${PojoI}();
[$cpp]     ${PojoI}::~${PojoI}() {}

[$hdr]     public:


DEFAULT CONSTRUCTOR BLOCK:


[$hdr]       ${PojoI}();
[$jav]       public ${PojoI}() {
[$cpp]       ${PojoI}::${PojoI}() : ${Pojo}() {
[$cpp]           loaded = true;
[$cpp]           toggleCollectionsLoaded(true);
[$cpp]           details = new omero::model::DetailsI();
[$jav]           loaded = true;
[$jav]           toggleCollectionsLoaded(true);
[$jav]           details = new omero.model.DetailsI();
[$jav]       }
[$cpp]       }

Python combines the two constructors. See below for a comparison.
[$pyc]       def __init__(self,id = None,loaded = True):
[$pyc]           super(${Pojo}I, self).__init__()
[$pyc]           self.id = id
[$pyc]           self.loaded = loaded
[$pyc]           if self.loaded:
[$pyc]              self.details = _omero_model.DetailsI()
[$pyc]              self.toggleCollectionsLoaded(True)
[$pyc]
TOGGLE COLLECTIONS:

[$jav]       public void toggleCollectionsLoaded(boolean load) {
[$hdr]       virtual void toggleCollectionsLoaded(bool load);
[$cpp]    void ${PojoI}::toggleCollectionsLoaded(bool load) {
[$pyc]       def toggleCollectionsLoaded(self,load):
#foreach( $property in $pojo.propertyClosureForFullConstructor)
#set(     $name = $pojo.getPropertyName($property))
#set(     $javaType = $c2j.getJavaTypeName($property,false))##generics
#set(     $seqName = "${Pojo}${name.substring(0,1).toUpperCase()}${name.substring(1,$name.length())}Seq" )## seqName copied from ice_defs.vm
#set(     $genericType = $c2j.getJavaTypeName($property,true) )
#if(      $genericType.contains("ome.model") )
#set(     $genericType = $genericType.replaceFirst(".*<ome.model..+?[.]","omero::model::").replaceFirst(">.*","") )
#end

Here we don't have to keep up with the type (set/list)
since all collections are lists in ice.

#if(      $fulltype.contains("byte[]"))
[$ice]     sequence<byte> ${seqName};

#elseif(  $javaType.startsWith("java.util.Set") || $javaType.startsWith("java.util.List"))
#set(     $genericTypeC = "${genericType.replaceAll('[.]','::')}")

[$ice]     ["java:type:java.util.ArrayList"] sequence<$genericTypeC> ${seqName};

[$jav]           if (load) {
[$jav]               ${property.name} = new ArrayList();
[$jav]               ${property.name}Loaded = true;
[$jav]           } else {
[$jav]               ${property.name} = null;
[$jav]               ${property.name}Loaded = false;
[$jav]           }
[$cpp]           if (load) {
[$cpp]               ${property.name} = ${seqName}();
[$cpp]               ${property.name}Loaded = true;
[$cpp]           } else {
[$cpp]               ${property.name} = (${seqName})0;
[$cpp]               ${property.name}Loaded = false;
[$cpp]           }
[$pyc]           if load:
[$pyc]               self.${property.name} = []
[$pyc]               self.${property.name}Loaded = True;
[$pyc]           else:
[$pyc]               self.${property.name} = []
[$pyc]               self.${property.name}Loaded = False;
[$pyc]
#end
#end
[$jav]    }
[$cpp]    }
##               In case there are no collections
[$pyc]           pass
[$pyc]

ICE CLASS:

Calculate inheritance. This is done here because sequences must first be defined.

#set( $base = "extends omero::model::IObject" )
#set( $extendsDeclaration = $base )
#if(  $pojo.isSubclass() )
#set( $extendsDeclaration = $pojo.getExtendsDeclaration().replaceFirst("ome.model..+?[.]","omero::model::" ) )
#end

[$ice]     class ${pojo.declarationName}
[$ice]     $extendsDeclaration
[$ice]     {

UNLOADED CONSTRUCTOR BLOCK:

[$hdr]       ${PojoI}(omero::RLongPtr idPtr, bool isLoaded = false);
[$cpp]    ${PojoI}::${PojoI}(omero::RLongPtr idPtr, bool isLoaded) : ${Pojo}() {
[$cpp]      id = idPtr;
[$cpp]      loaded = isLoaded;
[$cpp]      if (loaded) details = new omero::model::DetailsI(); 
[$cpp]      toggleCollectionsLoaded(isLoaded);
[$cpp]    }
[$jav]    public ${PojoI}(long id, boolean loaded) {
[$jav]      this.id = new omero.RLong(id);
[$jav]      this.loaded = loaded; 
[$jav]      if (loaded) details = new omero.model.DetailsI();
[$jav]    }
See single Python constructor above.

UNLOAD BLOCK:

[$jav]       public void unload(Ice.Current current) {
[$hdr]       virtual void unload(const Ice::Current& current = Ice::Current());
[$cpp]       void ${PojoI}::unload(const Ice::Current& current) {
[$pyc]       def unload(self, current = Ice.Current()):
[$pyc]           self.loaded = False
[$jav]           loaded = false;
[$cpp]           loaded = false;
#foreach($property in $pojo.propertyClosureForFullConstructor)
#if(!$clazz.identifierProperty.equals($property))
#set( $PropertyName = $pojo.beanCapitalize( $property.name ) )
[$jav]           unload${PropertyName}( );
[$cpp]           unload${PropertyName}( );
[$pyc]           self.unload${PropertyName}( )
#end
#end
[$pyc]
[$jav]    }
[$cpp]    }

SPECIAL METHODS:
Id acccesors copied from other accessors below.

[$jav]       public Long getId() {
[$jav]           return id == null ? null : id.val;
[$jav]       }
[$jav]    
[$jav]       public void setId( Long id ) {
[$jav]           this.id = (id == null) ? null : new omero.RLong(id);
[$jav]       }

[$hdr]       virtual omero::RLongPtr getId();
[$hdr]       virtual void setId( omero::RLongPtr id );

[$cpp]       omero::RLongPtr ${PojoI}::getId() {
[$cpp]           return id;
[$cpp]       }
[$cpp]    
[$cpp]       void ${PojoI}::setId(omero::RLongPtr _id) {
[$cpp]           id = _id;
[$cpp]       }  

[$pyc]       def getId(self):
[$pyc]           return self.id
[$pyc]
[$pyc]       def setId(self, _id):
[$pyc]           self.id = _id
[$pyc]
Doing unloadedPython as a method because of the multi-line restriction. See below.
[$pyc]       def checkUnloadedProperty(self, value, loadedField):
[$pyc]           if value == None:
[$pyc]               self.__dict__[loadedField] = False
[$pyc]           else:
[$pyc]               self.__dict__[loadedField] = True
[$pyc]
###########################################################################
#foreach($property in $pojo.propertyClosureForFullConstructor)#############
###########################################################################

ACCESSORS BLOCK:

Copied from pojo/PropertyAccessors.vm.
These mappings are from HibernateTypes-->IceTypes

Ice properties should only be defined once (not in every subclass, obviously).
However, because of Ice's inheritance structure, we are here using 
propertyClosureForFullConstructor which gives us superclass fields. These
must be filtered in the [Ice] sections below, but not for all others.

[$hdr]
[$hdr]       //
[$hdr]       //  ${Pojo}.${property.name}
[$hdr]       //

#set( $definedIn = "nothere" )
#foreach( $p2 in $pojo.allPropertiesIterator )
#if( $p2.name.equals($property.name) )
#set( $definedIn = "here" )
#end
#end
#set($Ice = "ice" )
#if( $definedIn.startsWith("not") )
#set($Ice = "NOT" )
#end

## UNIFY THESE
#set( $name = $pojo.getPropertyName($property))
#set( $field = $property.name )
#set( $PropertyName = $pojo.beanCapitalize( $property.name ) )
#set( $FIELD = ${field.toUpperCase()} )
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $open = " " )
#set( $close= " " )
#set( $prefix=" " )
#set( $suffix=" " )
#set( $unloadedJava=" " )
#set( $unloadedCpp=" " )
#set( $unloadedPython="pass" )
#set( $elementType = $c2j.getJavaTypeName($property,true).replaceFirst(".*<","").replaceFirst(">.*",""))
#set( $elementName = $c2j.unqualify( $elementType ) )
#set( $seqName = "${Pojo}${name.substring(0,1).toUpperCase()}${name.substring(1,$name.length())}Seq" )## seqName copied from ice_defs.vm
#set( $propLoaded = "${property.Name}Loaded" )

#if( $javaType.startsWith("ome"))##JAVA_TYPE
#set( $javaType = "omero.model.${shortType}" )
#set( $getter = "(omero.model.${shortType}) this.$property.name" )
#set( $setter = "${property.name}")
#set( $cppType = "omero::model::${shortType}Ptr" )

#elseif( $javaType.startsWith("IObject"))
#set( $javaType = "omero.model.IObject")
#set( $getter = "(omero.model.IObject) this.$property.name" )
#set( $setter = "${property.name}")
#set( $cppType = "omero::model::IObjectPtr")

## TODO use empty List or null?
## #684 Mapping all sets to lists.
#elseif( $javaType.startsWith("java.util.List") || $javaType.startsWith("java.util.Set") )
#set( $javaType = "java.util.List" )
#set( $getter = "${property.name} == null ? new java.util.ArrayList() : new java.util.ArrayList( this.$property.name ) " )
#set( $setter = "${property.name} == null ? new java.util.ArrayList() : new java.util.ArrayList( $property.name )" )
#set( $unloadedJava = "if (${property.name} == null) { this.${propLoaded} = false; } else { this.${propLoaded} = true; }" )
#set( $cppType = "$seqName" )
#set( $unloadedCpp = "if (_${property.name} != ($cppType) 0) { ${propLoaded} = true; } else { ${propLoaded} = false; }" )
#set( $unloadedPython = "self.checkUnloadedProperty(_${property.name},'${propLoaded}')" )

#elseif( $javaType.startsWith("java.lang.Boolean"))
#set( $getter = "${property.name} == null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? null : new omero.RBool(${property.name}) ")
#set( $cppType   = "omero::RBoolPtr" )

#elseif( $javaType.startsWith("java.lang.Integer"))
#set( $getter = "${property.name} == null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? null : new omero.RInt(${property.name}) ")
#set( $cppType   = "omero::RIntPtr" )

#elseif( $javaType.startsWith("java.lang.Long"))
#set( $getter = "${property.name} == null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? null : new omero.RLong(${property.name}) ")
#set( $cppType   = "omero::RLongPtr" )

#elseif( $javaType.startsWith("java.lang.Double"))
#set( $getter = "${property.name} == null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? null : new omero.RDouble(${property.name}) ")
#set( $cppType   = "omero::RDoublePtr" )

#elseif( $javaType.startsWith("java.lang.Float"))
#set( $getter = "${property.name} == null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? null : new omero.RFloat(${property.name}) ")
#set( $cppType   = "omero::RFloatPtr" )

#elseif( $javaType.startsWith("long")) ## for Permissions
#set( $javaType = "Long" )
#set( $getter   = "new Long(this.$property.name)" )
#set( $setter = "(${property.name} == null) ? 0 : this.$property.name == ${property.name}.longValue()")
#set( $cppType = "long" )

#elseif( $javaType.startsWith("java.sql.Timestamp")) ## for Event
#set( $getter = "${property.name} == null ? null : new java.sql.Timestamp( ${property.name}.val )" )
#set( $setter = "${property.name} == null ? null : new omero.RTime(${property.name}.getTime())");
#set( $cppType = "omero::RTimePtr" )

#elseif( $javaType.startsWith("java.lang.String")) ## for Event
#set( $getter = "${property.name} == null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? null : new omero.RString(${property.name}) ")
#set( $cppType = "omero::RStringPtr" )

#else
[$all]...ERROR...$javaType unknown.

#end##JAVA_TYPE

ICE BLOCK:

// $property
#if($clazz.identifierProperty.equals($property))
             // Id in IObject
#elseif($field.equals("details"))
             // Details in IObject
#elseif($field.equals("version"))
#if($extendsDeclaration.equals($base))
             // Version in superclass
[$Ice]       omero::RInt version;
#end
#elseif( ${shortType} == "String")
[$Ice]       omero::RString ${property.name};
#elseif( ${shortType} == "Boolean" )
[$Ice]       omero::RBool ${property.name};
#elseif ( ${shortType} == "Double" )
[$Ice]       omero::RDouble ${property.name};
#elseif ( ${shortType} == "Float" )
[$Ice]       omero::RFloat ${property.name};
#elseif( ${shortType} == "Integer")
[$Ice]       omero::RInt ${property.name};
#elseif ( ${shortType} == "Long" )
[$Ice]       omero::RLong ${property.name};
#elseif ($javaType.startsWith("ome") )## Had to be moved before "*Map" rule
[$Ice]       omero::model::${shortType} ${property.name};
#elseif ($javaType.equals("IObject"))## Special case of the previous
[$Ice]       omero::model::IObject ${property.name};
#elseif ($shortType.endsWith("Map") )
[$Ice]       dictionary ${property.name};
#elseif( $javaType.contains("java.util.List") || $javaType.contains("java.util.Set") || $javaType.contains("[]")) 
[$Ice]       $seqName ${property.name};
[$Ice]       bool ${property.name}Loaded;
#elseif ($javaType.equals("java.sql.Timestamp"))
[$Ice]       omero::RTime ${property.name};
#elseif ($javaType.equals("long")) ## From Permissions
[$Ice]       long ${field};
#else
[$Ice]       ERROR ===========> Unknown type (${javaType})
#end // End type


ASSOCIATION TYPES BLOCK:

#set( $hasSet  = $c2j.hasMetaAttribute($property, "set-add-method"))
#set( $hasLink = $c2j.hasMetaAttribute($property, "link-add-method") )

#set( $access = "protected" )
#set( $unloadIfIsSet = "${property.Name}Loaded = false;")
#if( !$hasSet && !$hasLink)
#set( $access = "public" )
#set( $unloadIfIsSet = "");
#end

Unload

[$jav]       public void unload${PropertyName}() {
[$jav]           ${unloadIfIsSet}
[$jav]           ${property.name} = null;
[$jav]       }
[$hdr]       virtual void unload${PropertyName}();
[$cpp]       void ${Pojo}I::unload${PropertyName}() {
[$cpp]           ${unloadIfIsSet}
[$cpp]           ${property.name} = ($cppType) 0;
[$cpp]       }
[$pyc]       def unload${PropertyName}(self):
[$pyc]           self.${property.Name}Loaded = False
[$pyc]           self.${property.name} = None;
[$pyc]
Original accessors: will have their visibility reduced if
the special set methods are added.

[$jav]       $access $javaType $pojo.getGetterSignature($property)() throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           return $getter;
[$jav]       }
[$jav]    
[$jav]       $access void set$name($javaType $property.Name) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           this.$property.Name = $setter;
[$jav]           $unloadedJava
[$jav]       }

#if($access == "protected" )
[$hdr]     protected:
#end
[$hdr]       virtual $cppType $pojo.getGetterSignature($property)();
[$hdr]       virtual void set$name($cppType _$property.Name);
#if($access == "protected" )
[$hdr]     public:
#end

[$cpp]       $cppType ${PojoI}::$pojo.getGetterSignature($property)() {
[$cpp]           errorIfUnloaded();
[$cpp]           return ${open}${property.name}${close};
[$cpp]       }
[$cpp]    
[$cpp]       void ${PojoI}::set$name($cppType _$property.Name) {
[$cpp]           errorIfUnloaded();
[$cpp]           $property.Name = $!{prefix}_${property.Name}$!{suffix};
[$cpp]           $unloadedCpp
[$cpp]       }

[$pyc]       def $pojo.getGetterSignature($property)(self):
[$pyc]           self.errorIfUnloaded()
[$pyc]           return self.${property.name}
[$pyc]
[$pyc]       def set$name(self, _${property.name}):
[$pyc]           self.errorIfUnloaded()
[$pyc]           self.${property.Name} = _${property.name}
[$pyc]           $unloadedPython
[$pyc]
One-to-many extras:

#if( $hasSet || $hasLink )

[$jav]       public boolean is${PropertyName}Loaded() {
[$jav]           return ${propLoaded};
[$jav]       }
[$hdr]       virtual bool is${PropertyName}Loaded();
[$cpp]       bool ${PojoI}::is${PropertyName}Loaded( ) {
[$cpp]           return ${propLoaded};
[$cpp]       }
[$pyc]       def is${PropertyName}Loaded(self):
[$pyc]           return self.${propLoaded}
[$pyc]
[$jav]       public long sizeOf${PropertyName}() throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${property.name}");
[$jav]           return ${property.name}.size();
[$jav]       }
[$hdr]       virtual Ice::Long sizeOf${PropertyName}();
[$cpp]       Ice::Long ${PojoI}::sizeOf${PropertyName}( ) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${property.name}");
[$cpp]           return ${property.name}.size();
[$cpp]       }
[$pyc]       def sizeOf${PropertyName}(self):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${property.name}")
[$pyc]           return len(self.${property.name})
[$pyc]
[$jav]       public Iterator iterate${PropertyName}() throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${property.name}");
[$jav]           return ${property.name}.iterator();
[$jav]       }
[$hdr]       virtual $cppType::iterator begin${PropertyName}();
[$hdr]       virtual $cppType::iterator end${PropertyName}();
[$cpp]       $cppType::iterator ${PojoI}::begin${PropertyName}(){
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${property.name}");
[$cpp]           return ${property.name}.begin();
[$cpp]       }
[$cpp]       $cppType::iterator ${PojoI}::end${PropertyName}(){
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${property.name}");
[$cpp]           return ${property.name}.end();
[$cpp]       } 
[$pyc]       def iterate${PropertyName}(self):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${property.name}")
[$pyc]           return iter(self.${property.name})
[$pyc]

[$jav]       public List<$javaType> copy${PropertyName}() throws omero.UnloadedEntityException{
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${property.name}");
[$jav]           List<$javaType> result = new ArrayList(${property.name});
[$jav]           return result;
[$jav]       }
[$pyc]       def copy${PropertyName}(self):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${property.name}")
[$pyc]           return list(self.${property.name})
[$pyc]
             Here we don't have a vector<$cppType> since the type is typedef'd
[$hdr]       virtual $cppType copy${PropertyName}();
[$cpp]       $cppType ${PojoI}::copy${PropertyName}() {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${property.name}");
[$cpp]           $cppType result(${property.name}.size());
[$cpp]           std::copy(${property.name}.begin(), ${property.name}.end(), result.begin());
[$cpp]           return result;
[$cpp]       }

#end


------------------------------------------------------------
Because of the ice inheritance hierarchy, we must use direct
field access on several methods below.
------------------------------------------------------------

Set modifications:

#if( $hasSet )
#set( $inverse = $c2j.getMetaAsString($property, "set-add-method"))
#set( $Inverse = $pojo.beanCapitalize( $inverse) )

add single

[$jav]       public void add${elementName}(${elementName} target) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           ${property.name}.add( target );
[$jav]           target.$inverse = this;
[$jav]       }
[$pyc]       def add${elementName}(self,target):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           self.${property.name}.append( target );
[$pyc]           target.$inverse = self;
[$pyc]
[$hdr]       virtual void add${elementName}(${elementName}Ptr target);
[$cpp]       void ${PojoI}::add${elementName}(${elementName}Ptr target) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           ${property.name}.push_back( target );
[$cpp]           target->$inverse = this;
[$cpp]       } 

add set

[$jav]       public void add${elementName}Set(Collection<${elementName}> targets) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           ${property.name}.addAll( targets );
[$jav]           for( ${elementName} target : targets) {
[$jav]               target.$inverse = this;
[$jav]           }
[$jav]       }
[$pyc]       def add${elementName}Set(self, targets):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if  not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           self.${property.name}.extend( targets )
[$pyc]           for target in targets:
[$pyc]               target.$inverse = self
[$pyc]
[$hdr]       virtual void add${elementName}Set($cppType targets);
[$cpp]       void ${PojoI}::add${elementName}Set($cppType targets) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           $cppType::iterator loc = ${property.name}.end();
[$cpp]           $cppType::iterator beg = targets.begin(); 
[$cpp]           $cppType::iterator end = targets.end(); 
[$cpp]           ${property.name}.insert(loc,beg,end);
[$cpp]           for ($cppType::iterator it = targets.begin(); it != targets.end(); ++it) {
[$cpp]               ${elementName}Ptr target = *it;
[$cpp]               target->$inverse = this;
[$cpp]           }
[$cpp]       }

remove single

#set( $removePredicate = "testRemove${elementName}From${PojoI}" )
[$cpp]       struct $removePredicate
[$cpp]       {
[$cpp]           const ${elementName}Ptr t;
[$cpp]           ${removePredicate}(const ${elementName}Ptr n) : t(n) {}
[$cpp]           bool operator()(${elementName}Ptr const& o) {
[$cpp]               return o == t;
[$cpp]           }
[$cpp]       };

[$jav]       public void remove${elementName}(${elementName} target) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           ${property.name}.remove( target );
[$jav]           target.$inverse = null;
[$jav]       }
[$pyc]       def remove${elementName}(self, target):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           self.${property.name}.remove( target )
[$pyc]           target.$inverse = None
[$pyc]
[$hdr]       virtual void remove${elementName}(${elementName}Ptr target);
[$cpp]       void ${PojoI}::remove${elementName}(${elementName}Ptr target) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           $cppType::iterator it = std::remove_if(
[$cpp]               ${property.name}.begin(),
[$cpp]               ${property.name}.end(),
[$cpp]               ${removePredicate}(target));
[$cpp]           ${property.name}.erase(it,${property.name}.end());
[$cpp]           target->$inverse = (${PojoI}Ptr)0;
[$cpp]       } 

remove multiple

#set( $removeSetPredicate = "testRemove${elementName}SetFrom${PojoI}" )
[$cpp]       struct ${removeSetPredicate}
[$cpp]       {
[$cpp]           const ${cppType} t;
[$cpp]           ${removeSetPredicate}(const ${cppType} n) : t(n) {}
[$cpp]           bool operator()(${elementName}Ptr const& o) {
[$cpp]               return std::find(t.begin(), t.end(), o) != t.end();
[$cpp]           }
[$cpp]       };    

[$jav]       public void remove${elementName}Set(Collection<${elementName}> targets) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           for( ${elementName} elt : targets) {
[$jav]               elt.$inverse = null;
[$jav]               ${property.name}.remove( elt );
[$jav]           }
[$jav]       }
[$pyc]       def remove${elementName}Set(self, targets):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           for elt in targets:
[$pyc]               elt.$inverse = None
[$pyc]               self.${property.name}.remove( elt )
[$pyc]
[$hdr]       virtual void remove${elementName}Set($cppType targets);
[$cpp]       void ${PojoI}::remove${elementName}Set($cppType targets) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           ${cppType}::iterator end = ${property.name}.end(); 
[$cpp]           ${cppType}::iterator removed = std::remove_if(
[$cpp]               ${property.name}.begin(), end,
[$cpp]               $removeSetPredicate(targets));
[$cpp]           ${cppType}::iterator beg(removed);
[$cpp]           for(; beg != end; beg++) {
[$cpp]               (*beg)->$inverse = (${PojoI}Ptr)0; 
[$cpp]           }
[$cpp]           ${property.name}.erase(removed,end);
[$cpp]       }   

clear

[$jav]       public void clear${PropertyName}() throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           for( ${elementName} elt : (Collection<${elementName}>)${property.name}) {
[$jav]               elt.$inverse = null;
[$jav]           }
[$jav]           ${property.name}.clear();
[$jav]       }
[$pyc]       def clear${PropertyName}(self):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           for elt in self.${property.name}:
[$pyc]               elt.$inverse = None
[$pyc]           self.${property.name} = list()
[$pyc]
[$hdr]       virtual void clear${PropertyName}();
[$cpp]       void ${PojoI}::clear${PropertyName}() {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           $cppType::iterator beg = ${property.name}.begin();
[$cpp]           $cppType::iterator end = ${property.name}.end();
[$cpp]           for(; beg != end; beg++) {
[$cpp]               (*beg)->$inverse = (${PojoI}Ptr)0;
[$cpp]           }
[$cpp]           ${property.name}.clear();
[$cpp]       }  

Link Modifications

#elseif( $hasLink )

Here our "elements" from the above are the links which themselves
have linked elements.

#set( $linkedType = $c2j.getMetaAsString($property, "link-add-method"))
#set( $linkedName = $c2j.unqualify( $linkedType ) )
#set( $LinkType = $elementType )
#set( $Link = $c2j.unqualify( $LinkType ) )
#set( $order = $c2j.getMetaAsString($property, "link-add-order"))
#set( $next = $c2j.getMetaAsString($property, "link-add-next"))
#set( $other = $c2j.getMetaAsString($property, "link-add-other"))
#set( $bidir = $c2j.getMetaAsBool($property, "link-add-bidir"))
#set( $pyorder = $order.replaceAll("this","self"))

ADD

[$jav]       public void link${linkedName}(${linkedName} addition) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           ${Link}I link = new ${Link}I();
[$jav]           link.link( ${order} );
[$jav]           add${Link}( link, true );
[$jav]       }
[$pyc]       def link${linkedName}(self, addition):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           link = _omero_model.${Link}I()
[$pyc]           link.link( ${pyorder} );
[$pyc]           self.add${Link}( link, True )
[$pyc]
[$hdr]       virtual void link${linkedName}(${linkedName}Ptr addition);
[$cpp]       void ${PojoI}::link${linkedName}(${linkedName}Ptr addition) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           ${Link}IPtr link = new ${Link}I();
[$cpp]           link->link( ${order} );
[$cpp]           add${Link}( link, true );
[$cpp]       }  

TODO: do we need to do link.parent = ...;

[$jav]       public void add${Link}(${Link} link, boolean bothSides) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           ${property.name}.add( link );
#if($bidir) 
TODO: Should we check for nulls in other?
[$jav]           if (bothSides && link.${other}.loaded ) {
[$jav]               ((${linkedName}I)link.${other}).add${Link}( link, false );
[$jav]           }
#end
[$jav]       }
[$pyc]       def add${Link}(self, link, bothSides):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           self.${property.name}.append( link )
#if($bidir) 
[$pyc]           if bothSides and link.${other}.loaded:
[$pyc]               link.${other}.add${Link}( link, False )
#end
[$pyc]
[$hdr]       virtual void add${Link}(${Link}Ptr link, bool bothSides);
[$cpp]       void ${PojoI}::add${Link}(${Link}Ptr link, bool bothSides) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           ${property.name}.push_back( link );
#if($bidir)
[$cpp]           if (bothSides && link->${other}->loaded ) {
[$cpp]               ${linkedName}IPtr::dynamicCast(link->${other})->add${Link}( link, false );
[$cpp]           }
#end
[$cpp]       }  

FIND

[$jav]       public List<$Link> find${Link}(${linkedName} removal) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           List result = new ArrayList();
[$jav]           for( $Link link : ${property.name} ) {
[$jav]               if (link.${other} == removal) result.add(link);
[$jav]           }
[$jav]           return result;
[$jav]       }
[$pyc]       def find${Link}(self, removal):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           result = list()
[$pyc]           for link in self.${property.name}:
[$pyc]               if link.${other} == removal: result.append(link)
[$pyc]           return result
[$pyc]
[$hdr]       virtual std::vector<${Link}Ptr> find${Link}(${linkedName}Ptr removal);
[$cpp]       std::vector<${Link}Ptr> ${PojoI}::find${Link}(${linkedName}Ptr removal) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           std::vector<${Link}Ptr> result;
[$cpp]           $cppType::iterator beg = begin${PropertyName}();
[$cpp]           $cppType::iterator end = end${PropertyName}();
[$cpp]           while (beg != end) {
[$cpp]               if ((*beg)->${other} == removal) result.push_back( *beg );
[$cpp]               ++beg;
[$cpp]           }
[$cpp]           return result;
[$cpp]       }  

REMOVE

#set( $removeLinkPredicate = "testRemove${Link}From${PojoI}" )
[$cpp]
[$cpp]       struct $removeLinkPredicate {
[$cpp] 
[$cpp]         const ${Link}Ptr t;
[$cpp]         const bool bothSides;
[$cpp]         ${removeLinkPredicate}(const ${Link}Ptr n, const bool b) : t(n), bothSides(b) {}
[$cpp]         bool operator()(${Link}Ptr const& o) {
[$cpp]            if (o == t) {
#if($bidir)
[$cpp]                if (bothSides && t->${other}->loaded){
[$cpp]                    ${linkedName}IPtr::dynamicCast(o->${other})->remove${Link}(t,false);
[$cpp]                }
#end
[$cpp]                return true;
[$cpp]            }
[$cpp]            return false;
[$cpp]         }
[$cpp]       }; 
[$cpp]

[$jav]       public void unlink${linkedName}(${linkedName} removal) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           List<$Link> toRemove = find${Link}(removal);
[$jav]           Iterator<$Link> it = toRemove.iterator();
[$jav]           while( it.hasNext() ){
[$jav]               remove${Link}( it.next(), true );
[$jav]           }
[$jav]       }
[$jav]       public void remove${Link}(${Link} link, boolean bothSides ) throws omero.UnloadedEntityException, omero.UnloadedCollectionException {
[$jav]           errorIfUnloaded();
[$jav]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$jav]           ${property.name}.remove( link );
#if($bidir)
[$jav]           if (bothSides && link.${other}.loaded) {
[$jav]               ((${linkedName}I)link.${other}).remove${Link}(link, false );
[$jav]           }
#end
[$jav]       }
[$pyc]       def unlink${linkedName}(self, removal):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           toRemove = self.find${Link}(removal)
[$pyc]           for next in toRemove:
[$pyc]               self.remove${Link}( next, True )
[$pyc]
[$pyc]       def remove${Link}(self, link, bothSides ):
[$pyc]           self.errorIfUnloaded()
[$pyc]           if not self.${propLoaded}: self.throwNullCollectionException("${name}")
[$pyc]           self.${property.name}.remove( link )
#if($bidir)
[$pyc]           if bothSides and link.${other}.loaded:
[$pyc]               link.${other}.remove${Link}(link, False)
#end
[$pyc]
[$hdr]       virtual void unlink${linkedName}(${linkedName}Ptr removal);
[$cpp]       void ${PojoI}::unlink${linkedName}(${linkedName}Ptr removal) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           std::vector<${Link}Ptr> toRemove = find${Link}(removal);
[$cpp]           $cppType::iterator beg = toRemove.begin();
[$cpp]           $cppType::iterator end = toRemove.end();
[$cpp]           while (beg != end) {
[$cpp]             remove${Link}( *beg, true );
[$cpp]             ++beg;
[$cpp]           }
[$cpp]       }
[$hdr]       virtual void remove${Link}(${Link}Ptr link, bool bothSides);
[$cpp]       void ${PojoI}::remove${Link}(${Link}Ptr link, bool bothSides) {
[$cpp]           errorIfUnloaded();
[$cpp]           if (!${propLoaded}) throwNullCollectionException("${name}");
[$cpp]           // predicate may do reverse side
[$cpp]           $cppType::iterator it = std::remove_if(
[$cpp]               ${property.name}.begin(),
[$cpp]               ${property.name}.end(),
[$cpp]               ${removeLinkPredicate}(link, bothSides));
[$cpp]           ${property.name}.erase(it,${property.name}.end());
[$cpp]       } 

##[$jav]    public Iterator<${linkedName}> linked${linkedName}Iterator() throws omero.UnloadedEntityException {
##[$jav]        errorIfUnloaded();
##[$jav]        if (!${propLoaded}) throwNullCollectionException("${name}");
##[$jav]        return null;
##[$jav]    }
##[$hdr]    virtual std::vector<${linkedName}Ptr>::iterator linked${linkedName}Iterator();
##[$cpp]    std::vector<${linkedName}Ptr>::iterator ${PojoI}::linked${linkedName}Iterator() {
##[$cpp]        errorIfUnloaded();
##[$cpp]        std::vector<${linkedName}Ptr>::iterator result;
##[$cpp]        return result;
##TODO------------
##[$cpp]    }



#end

##################################################################
#end##FOREACH#####################################################
##################################################################

CLASS-LEVEL EXTRA METHODS:

#if( $c2j.hasMetaAttribute($clazz, "link-parent") )
#set( $parent = $c2j.unqualify( $c2j.getMetaAsString($clazz, "link-parent")))
#set( $child =  $c2j.unqualify( $c2j.getMetaAsString($clazz, "link-child" )))

TODO: Should these be <>I or not?

[$jav]       public void link(${parent} _parent, ${child} _child) throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           setParent( _parent );
[$jav]           setChild( _child );
[$jav]       }
[$jav]       public ${parent} parent() throws omero.UnloadedEntityException {
[$jav]           errorIfUnloaded();
[$jav]           return (${parent}) parent;
[$jav]       }
[$jav]       public ${child}I child() throws omero.UnloadedEntityException{
[$jav]           errorIfUnloaded();
[$jav]           return (${child}I) child;
[$jav]       }
[$pyc]       def link(self, _parent, _child):
[$pyc]           self.errorIfUnloaded()
[$pyc]           self.setParent( _parent )
[$pyc]           self.setChild( _child )
[$pyc]
[$pyc]       def parent(self):
[$pyc]           self.errorIfUnloaded()
[$pyc]           return self.parent
[$pyc]
[$pyc]       def child(self):
[$pyc]           self.errorIfUnloaded()
[$pyc]           return self.child
[$pyc]
[$hdr]       virtual void link(${parent}Ptr parent, ${child}Ptr child);
[$hdr]       virtual ${parent}Ptr castParent();
[$hdr]       virtual ${child}Ptr castChild();
[$cpp]       void ${PojoI}::link(${parent}Ptr _parent, ${child}Ptr _child) {
[$cpp]           errorIfUnloaded();
[$cpp]           setParent( _parent );
[$cpp]           setChild(  _child  );
[$cpp]       }
[$cpp]       ${parent}Ptr ${PojoI}::castParent() {
[$cpp]           errorIfUnloaded();
[$cpp]           return ${parent}Ptr::dynamicCast( parent );
[$cpp]       }
[$cpp]       ${child}Ptr ${PojoI}::castChild() {
[$cpp]           errorIfUnloaded();
[$cpp]           return ${child}Ptr::dynamicCast( child );
[$cpp]       }
#end


COPYOBJECT BLOCK:

[$jav]       public void copyObject(ome.util.Filterable model, ome.util.ModelMapper _mapper) {
[$jav]            omero.util.IceMapper mapper = (omero.util.IceMapper) _mapper;
[$jav]            if (model instanceof $pojo.qualifiedDeclarationName){
[$jav]                $pojo.qualifiedDeclarationName source = ($pojo.qualifiedDeclarationName) model;
[$jav]                this.loaded = source.isLoaded();
[$jav]                this.setId( (Long) mapper.findTarget( source.getId() ));
#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $method = "source.get$name()" )

 TODO: Currently the findTarget methods have separate names.
 Instead there should be a cast to guarantee that the right
 method is invoked.

#set( $findMethod = "Target" )

 All properties other than id must be "guarded" to prevent
 UnloadedEntityExceptions.

#set( $guard  = "if (this.loaded) " )
#if($clazz.identifierProperty.equals($property))
#set( $guard  = "" )
#end

#if( $pojo.qualifiedDeclarationName.startsWith("ome.model.internal.Permissions") )
#set( $javaType = "Long" )
#set( $method = "ome.util.Utils.internalForm(source)" )
#elseif( $javaType.startsWith("ome") )
#set( $javaType = "omero.model.${shortType}" )
#elseif( $javaType.startsWith("IObject") )
#set( $javaType = "omero.model.IObject" )
#elseif( $javaType.startsWith("long"))
#set( $javaType = "Long")
#elseif( $javaType.startsWith("java.util.Map") )
#set( $findMethod = "Map" )
#elseif( $javaType.startsWith("java.util.Set") || $javaType.startsWith("java.util.List") )
## See ticket:684
## If this is the case, we can't use the accessor and have to use a generated method
#set( $method = "($javaType) source.retrieve(${pojo.qualifiedDeclarationName}.${name.toUpperCase()})" )
#set( $javaType = "java.util.List" )
#set( $findMethod = "Collection") 
#end

[$jav]              $guard this.set$name(($javaType) mapper.find${findMethod}($method));

#end

[$jav]       } else {
[$jav]                throw new IllegalArgumentException(
[$jav]                  "${pojo.declarationName} cannot copy from " +
[$jav]                  (model==null ? "null" : model.getClass().getName()));
[$jav]       }
[$jav]       }

FILLOBJECT BLOCK:

[$jav]       public ome.util.Filterable fillObject(ome.util.ReverseModelMapper _mapper) {
[$jav]           omero.util.IceMapper mapper = (omero.util.IceMapper) _mapper;
[$jav]           $pojo.qualifiedDeclarationName target = new ${pojo.qualifiedDeclarationName}();
[$jav]           mapper.store(this, target);
[$jav]           if (!this.loaded) {
[$jav]             target.setId( id == null ? null : id.val );
[$jav]             target.unload();
[$jav]           } else {
[$jav]             target.setId( this.getId() ); // special property
#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $FIELD = "${pojo.qualifiedDeclarationName}.${name.toUpperCase()}" )
#set( $propLoaded = "${property.Name}Loaded" )

#if( $pojo.qualifiedDeclarationName.startsWith("ome.model.internal.Permissions") )
[$jav]             target = ome.util.Utils.toPermissions((Long)this.getPerm1());

#elseif( $javaType.startsWith("ome") )
[$jav]             target.putAt($FIELD, ($javaType) mapper.reverse( (ome.api.ModelBased) this.get$name() ) );

#elseif( $javaType.startsWith("IObject") )
[$jav]             target.set$name( (ome.model.IObject) mapper.reverse( (ome.api.ModelBased) this.get$name() ) );

#elseif( $javaType.startsWith("java.util.Set") || $javaType.startsWith("java.util.List") )
## If this is the case, we can't use the accessor and have to use a generated method

[$jav]             if (this.${propLoaded}) {

ticket:684 This is necessary to map back and forth from sets.
[$jav]               target.putAt( $FIELD, mapper.reverse( this.get$name(), ${javaType}.class ));
[$jav]             } else {
[$jav]               target.putAt( $FIELD, null );
[$jav]             }

#elseif( $javaType.startsWith("long"))
 ----------------> ERROR
#else
[$jav]             target.set$name( this.get$name() );
#end
#end

[$jav]           }
[$jav]           return target;
[$jav]         }

MISCELLANEOUS METHODS:

[$jav]     /**
[$jav]      * Casts (without warning) the given list to a list of
[$jav]      * the current type. 
[$jav]      * @throws ClassCastException
[$jav]      */
[$jav]     @SuppressWarnings("unchecked") public static List<${PojoI}> cast(List list) { return list; }


END DECLARATION BLOCK:

[$jav] }
[$hdr]  };
[$hdr]  typedef IceUtil::Handle<${PojoI}> ${PojoI}Ptr;
[$hdr]

[$cpp]}}
[$hdr]}}
[$hdr] #endif // ${POJOI}_H
[$ice]     };
[$ice]   };
[$ice] };
[$ice] #endif // ${POJOI}_ICE
[$pyc] _omero_model.${PojoI} = ${PojoI}
#stop

