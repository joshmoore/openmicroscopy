<?xml version="1.0" encoding="utf-8"?>
<project name="OmeroCpp" default="install" basedir=".">

    <dirname property="up-two"        file="${basedir}"/>
    <dirname property="up-one"        file="${up-two}"/>
    <property name="import.dir"       value="${up-one}/antlib/resources"/>
    <property name="copy.dir"         value="target/temp"/>

    <import file="../make.xml"/>
    <import file="../common.xml"/>

    <target name="tools-init">
        <get-source todir="${copy.dir}">
            <fileset dir="../../blitz/resources" includes="**/*.h"/>
            <fileset dir="../../blitz/target/generated/resources" includes="**/*.h"/>
            <fileset dir="../../blitz/src" includes="**/*.h,**/*.cpp"/>
            <fileset dir="../../blitz/target/generated/src" includes="**/*.h,**/*.cpp"/>
        </get-source>
        <!--
            For ease of use, we concatenate all of our header files
            into a single header file.
        -->
        <concat destfile="${copy.dir}/omero/ModelI.h">
            <header>

/* All *I.h files concatenated by blitz/build.xml */
#ifndef OMERO_MODELI_H
#define OMERO_MODELI_H
#include &lt;omero/fwd.h&gt;
#include &lt;omero/Model.h&gt;
#include &lt;omero/IObject.h&gt;
#include &lt;omero/ClientErrors.h&gt;
#include &lt;Ice/Ice.h&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

            </header>
            <fileset dir="${copy.dir}" includes="**/omero/model/*I.h"/>
            <footer>

#endif // OMERO_MODELI_H

</footer>
        </concat>
    </target>

    <target name="tools-build" depends="tools-init,make-build" description="Uses autogen.sh and make to build artifacts"/>

    <target name="tools-dist" depends="tools-build,make-install" description="Copies files into tools/target">
        <copy file="${copy.dir}/omero/ModelI.h" todir="../target/include/omero"/>
        <!-- Here we have to copy ModelI.h out of ${copy.dir} and into include, since
        ${copy.dir} is already in the dist. Later we may want to test copying them all
        back, but that depends on how get-source works -->
    </target>

   <target name="tools-clean" depends="make-clean">
        <delete dir="${copy.dir}"/>
	<delete dir="${basedir}/target"/>
    </target>

</project>
