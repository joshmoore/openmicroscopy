<?xml version="1.0" encoding="utf-8"?>
<project name="licenses" default="install" basedir=".">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2007 Glencoe Software, Inc. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore, josh at glencoesoftware.com
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-->
	<description>
	Add-on to the OMERO code base which allows custom implementations
	of a LicenseStore which regulates access to the server based on 
	License tokens. 
	</description>    
	
	<property name="main.class" value="ome.services.licenses.tasks.Run"/>
	<property name="uses.ice" value="true"/>
	<dirname property="up-two" file="${basedir}"/>
	<dirname property="up-one" file="${up-two}"/>
	<property name="import.dir"       value="${up-one}/antlib/resources"/>
	<import file="${import.dir}/global.xml"/>
	<import file="${import.dir}/dependencies.xml"/>
	<import file="${import.dir}/lifecycle.xml"/>

    <import file="../common.xml"/>
    <import file="../make.xml"/>
    <import file="../python.xml"/>

	<!-- The hard-wiring allows a specific Store implementation to
	be hard-wired into the LicenseBean.

	The value is the class names of a LicenseStore implementation with a 
	a no-arg constructor. This allows classes unknown to the server at 
	compile time to become a part of a distribution. -->
	<target name="compile" depends="generate" unless="skip.compile">
		<hard-wire file="ome/services/licenses/LicenseBean.java"
			token="&quot;ome.services.licenses.Store&quot;"
			value="${ome.services.licenses.Store_class}"/>
		<myjavac>
			<exclude name="**/LicenseBean.java"/>
			<exclude name="**/LicenseSessionListener.java"/>
			<exclude name="**/LicenseWiring.java"/>
			<src path="${src.dest}"/>
			<src path="${src.dir}"/>
		</myjavac>
		<copy todir="${src.dest}"><fileset dir="${src.dir}" includes="**/LicenseBean.java"/></copy>
		<copy todir="${src.dest}"><fileset dir="${src.dir}" includes="**/LicenseSessionListener.java"/></copy>
		<copy todir="${src.dest}"><fileset dir="${src.dir}" includes="**/LicenseWiring.java"/></copy>
		<myjavac>
			<include name="**/LicenseBean.java"/>
			<include name="**/LicenseSessionListener.java"/>
			<include name="**/LicenseWiring.java"/>
			<src path="${src.dest}"/>
		</myjavac>
		<delete file="${src.dest}/ome/services/licenses/LicenseBean.java"/>
		<delete file="${src.dest}/ome/services/licenses/LicenseSessionListener.java"/>
		<delete file="${src.dest}/ome/services/licenses/LicenseWiring.java"/>
	</target>

    <target name="tools-init">
        <get-source todir="${target.dir}">
            <fileset dir="." excludes="*"/>
        </get-source>
    </target>

    <target name="tools-build" depends="tools-init,install,make-build,python-build" description="Creates all artifacts for tools/target">
        <mkdir dir="${basedir}/src/slice_generated"/>
        <slice_py todir="${basedir}/target" include="../../blitz/resources" prefix="omero_">
            <fileset dir="${basedir}/resources/omero" includes="*.ice"/>
        </slice_py>
    </target>

    <!-- Additional functionality for the lifecycle.package target.
    Unjars the final contents of the service jar to a tools/target
    directory so that they can be bundled together for the final products.
    This is necessary since otherwise the jar listed here would have to
    be manually added to app/resources/application.xml -->
    <target name="tools-dist" depends="tools-build,python-install" description="Copied artifacts to tools/target" unless="skip.compile">
        <mkdir dir="${tools.classes}"/>
        <unjar src="${target.dir}/${ivy.module}.jar" dest="${tools.classes}"/>
        <copy todir="../target/client">
            <fileset dir="${target.dir}" includes="${ivy.module}.jar"/>
        </copy>
        <copy todir="../target/include">
            <fileset dir="${resrc.dir}" includes="**/*.ice,**/*.h"/>
            <fileset dir="src/slice_generated" includes="**/*.h"/>
            <fileset dir="src" includes="**/*.h" excludes="**/slice_generated/**/*"/>
        </copy>
        <antcall target="make-install" inheritAll="true" inheritRefs="true"/>
    </target>

    <target name="tools-clean" depends="clean,make-clean,python-clean">
	<delete dir="${basedir}/target"/>
        <delete dir="${basedir}/src/slice_generated"/>
    </target>

</project>
